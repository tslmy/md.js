{"version":3,"file":"InstancedSpheres.js","sourceRoot":"","sources":["../../../src/view/three/InstancedSpheres.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\n\n/**\n * Instanced spheres renderer (simple replacement for point sprites).\n * - Uses MeshBasicMaterial (no lighting needed) for performance & predictable flat color.\n * - Per-particle color via setColorAt (supported in r144) with material.vertexColors=true.\n * - Scale encodes (optional) mass if provided.\n */\nexport class InstancedSpheres {\n  private readonly mesh: THREE.InstancedMesh\n  private readonly tmpMatrix = new THREE.Matrix4()\n  private readonly tmpPosition = new THREE.Vector3()\n  private readonly tmpQuat = new THREE.Quaternion() // identity\n  private readonly tmpScale = new THREE.Vector3(1, 1, 1)\n  private readonly color = new THREE.Color()\n  private needsCommit = false\n\n  constructor(count: number, baseRadius: number, colors: THREE.Color[], masses?: Float32Array) {\n    const geo = new THREE.SphereGeometry(1, 12, 10)\n    const mat = new THREE.MeshBasicMaterial({ vertexColors: true })\n    this.mesh = new THREE.InstancedMesh(geo, mat, count)\n    this.tmpQuat.identity()\n\n    // Pre-seed transforms (will be updated each frame)\n  const avgMass = masses?.length ? averageFinite(masses) : 1\n    for (let i = 0; i < count; i++) {\n      const rScale = masses ? Math.cbrt((masses[i] || avgMass) / avgMass) : 1\n      this.tmpScale.setScalar(baseRadius * rScale)\n      this.tmpPosition.set(0, 0, 0)\n      this.tmpMatrix.compose(this.tmpPosition, this.tmpQuat, this.tmpScale)\n      this.mesh.setMatrixAt(i, this.tmpMatrix)\n      const c = colors[i] || new THREE.Color(1, 1, 1)\n      this.mesh.setColorAt(i, c)\n    }\n    this.mesh.instanceMatrix.needsUpdate = true\n    if (this.mesh.instanceColor) this.mesh.instanceColor.needsUpdate = true\n  }\n\n  update(i: number, x: number, y: number, z: number, scaleScalar?: number): void {\n    this.tmpPosition.set(x, y, z)\n    if (scaleScalar != null) this.tmpScale.setScalar(scaleScalar)\n    this.tmpMatrix.compose(this.tmpPosition, this.tmpQuat, this.tmpScale)\n    this.mesh.setMatrixAt(i, this.tmpMatrix)\n    this.needsCommit = true\n  }\n\n  commit(): void {\n    if (!this.needsCommit) return\n    this.mesh.instanceMatrix.needsUpdate = true\n    this.needsCommit = false\n  }\n\n  setVisible(v: boolean): void { this.mesh.visible = v }\n\n  addTo(scene: THREE.Scene): void { scene.add(this.mesh) }\n\n  dispose(): void {\n    this.mesh.geometry.dispose(); (this.mesh.material as THREE.Material).dispose()\n  }\n}\n\nfunction averageFinite(arr: Float32Array): number {\n  let sum = 0, n = 0\n  for (const v of arr) { if (isFinite(v)) { sum += v; n++ } }\n  return n ? sum / n : 1\n}\n"]}
