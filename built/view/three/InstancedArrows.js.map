{"version":3,"file":"InstancedArrows.js","sourceRoot":"","sources":["../../../src/view/three/InstancedArrows.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\n\n/**\n * Batched arrow renderer using instanced meshes (cone for head + cylinder for shaft) per particle.\n * Reduces draw calls vs. one ArrowHelper per particle.\n * API: call update(i, origin, dir, length, color) each frame (or skip if hidden). Then call commit().\n */\nexport class InstancedArrows {\n  private readonly shaft: THREE.InstancedMesh\n  private readonly head: THREE.InstancedMesh\n  private readonly tmpMat = new THREE.Matrix4()\n  private readonly up = new THREE.Vector3(0, 1, 0)\n  private readonly dir = new THREE.Vector3()\n  private readonly quat = new THREE.Quaternion()\n  private readonly scale = new THREE.Vector3()\n  private readonly color = new THREE.Color()\n  // Using simple material color (per-type) for clarity & older Three.js compatibility.\n  private lengths: Float32Array\n  private visible = true\n\n  constructor(count: number, params: { shaftRadius?: number; headRadius?: number; headLengthRatio?: number; color?: number }) {\n    const shaftRadius = params.shaftRadius ?? 0.02\n    const headRadius = params.headRadius ?? 0.05\n  // headLengthRatio reserved for future shape tuning (currently fixed proportion logic)\n    const baseColor = params.color ?? 0xffffff\n\n    const shaftGeo = new THREE.CylinderGeometry(shaftRadius, shaftRadius, 1, 6, 1, true)\n    shaftGeo.translate(0, 0.5, 0) // base at origin, extend +Y\n    const headGeo = new THREE.ConeGeometry(headRadius, 1, 8)\n    headGeo.translate(0, 0.5, 0)\n\n  const shaftMat = new THREE.MeshBasicMaterial({ color: baseColor })\n  const headMat = new THREE.MeshBasicMaterial({ color: baseColor })\n\n    this.shaft = new THREE.InstancedMesh(shaftGeo, shaftMat, count)\n    this.head = new THREE.InstancedMesh(headGeo, headMat, count)\n\n  // Initialize transforms\n    this.lengths = new Float32Array(count)\n    for (let i = 0; i < count; i++) {\n      this.shaft.setMatrixAt(i, new THREE.Matrix4())\n      this.head.setMatrixAt(i, new THREE.Matrix4())\n    }\n    this.shaft.instanceMatrix.needsUpdate = true\n    this.head.instanceMatrix.needsUpdate = true\n  }\n\n  setVisible(v: boolean) { this.visible = v; this.shaft.visible = v; this.head.visible = v }\n\n  /** Update one arrow. dir is any vector (0 handled as hidden tiny arrow). */\n  update(index: number, origin: THREE.Vector3, dir: THREE.Vector3, length: number): void {\n    if (index >= this.lengths.length) return\n    let len = length\n    if (!isFinite(len) || len < 1e-6) len = 1e-6\n    this.lengths[index] = len\n\n    this.dir.copy(dir)\n    if (this.dir.lengthSq() === 0) this.dir.set(1, 0, 0) // arbitrary\n    this.dir.normalize()\n    this.quat.setFromUnitVectors(this.up, this.dir)\n\n    // Partition length between shaft & head\n    const headPortion = Math.min(0.25 * len, len)\n    const shaftLength = Math.max(len - headPortion, 1e-6)\n    const headLength = headPortion\n\n    // shaft transform\n    this.scale.set(1, shaftLength, 1)\n    this.tmpMat.compose(origin, this.quat, this.scale)\n    this.shaft.setMatrixAt(index, this.tmpMat)\n\n    // head origin at end of shaft (+Y local axis)\n    const headOrigin = new THREE.Vector3(0, shaftLength, 0).applyQuaternion(this.quat).add(origin)\n    this.scale.set(1, headLength, 1)\n    this.tmpMat.compose(headOrigin, this.quat, this.scale)\n    this.head.setMatrixAt(index, this.tmpMat)\n\n  }\n\n  commit(): void {\n    this.shaft.instanceMatrix.needsUpdate = true\n    this.head.instanceMatrix.needsUpdate = true\n  }\n\n  addTo(scene: THREE.Scene) { scene.add(this.shaft); scene.add(this.head) }\n\n  dispose(): void {\n    this.shaft.geometry.dispose(); (this.shaft.material as THREE.Material).dispose()\n    this.head.geometry.dispose(); (this.head.material as THREE.Material).dispose()\n  }\n}\n"]}
