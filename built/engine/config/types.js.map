{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/engine/config/types.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AA+CH,6EAA6E;AAC7E,MAAM,UAAU,oBAAoB,CAAC,GAAiB;IACpD,MAAM,IAAI,GAA4B;QACpC,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;QACtB,CAAC,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC;QAC9B,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC;QAClC,CAAC,OAAO,EAAE,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC;QAC9B,CAAC,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QACtB,CAAC,IAAI,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;KACzB,CAAA;IACD,KAAK,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,MAAM,CAAC,EAAE,CAAC,CAAA;IAC9F,CAAC;IACD,IAAI,GAAG,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;IAC9E,IAAI,GAAG,CAAC,OAAO,CAAC,UAAU,IAAI,GAAG,CAAC,OAAO,CAAC,UAAU,KAAK,gBAAgB,IAAI,GAAG,CAAC,OAAO,CAAC,UAAU,KAAK,OAAO,EAAE,CAAC;QAChH,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;IACrE,CAAC;IACD,IAAI,GAAG,CAAC,QAAQ,EAAE,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AAC7J,CAAC;AAaD;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,QAAsB;IACjD,OAAO;QACL,KAAK,EAAE;YACL,aAAa,EAAE,QAAQ,CAAC,aAAa;YACrC,GAAG,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,cAAc,EAAE,CAAC,EAAE,QAAQ,CAAC,cAAc,EAAE,CAAC,EAAE,QAAQ,CAAC,cAAc,EAAE;SAC5F;QACD,OAAO,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,MAAM,EAAE,QAAQ,CAAC,cAAc,EAAE;QAC7D,MAAM,EAAE;YACN,YAAY,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB;YAC7C,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB;YACxC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,qBAAqB;SAC1C;QACD,SAAS,EAAE;YACT,OAAO,EAAE,QAAQ,CAAC,OAAO;YACzB,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,CAAC,EAAE,QAAQ,CAAC,CAAC;YACb,CAAC,EAAE,QAAQ,CAAC,CAAC;YACjB,EAAE,EAAE,QAAQ,CAAC,EAAE;SACZ;KACF,CAAA;AACH,CAAC","sourcesContent":["/**\n * Engine configuration types & lightweight runtime guards.\n *\n * This is an initial scaffold for the future higher‑level SimulationEngine.\n * It intentionally mirrors a subset of the existing `settings.ts` shape but\n * remains decoupled so we can evolve internal naming & validation without\n * disturbing the UI / legacy path. Later we will introduce a schema (zod or\n * custom) plus versioned migrations. For now we keep it minimal and rely on\n * TypeScript + a couple of runtime assertions.\n *\n * NOTE: This module is **internal / experimental** and not yet consumed by the\n * existing test scripts (which still directly build `Simulation`). It is safe\n * to iterate rapidly here.\n */\n\nexport interface EngineForcesConfig {\n  /** Enable Lennard‑Jones force. */\n  lennardJones: boolean\n  /** Enable Newtonian gravity. */\n  gravity: boolean\n  /** Enable Coulomb / electrostatics. */\n  coulomb: boolean\n}\n\nexport interface EnginePhysicalConstants {\n  epsilon: number\n  sigma: number\n  G: number\n  K: number\n  kB: number\n}\n\nexport interface EngineRuntimeConfig {\n  /** Target (base) integration timestep. */\n  dt: number\n  /** Pairwise distance cutoff (world units). */\n  cutoff: number\n  /** Integrator selection (defaults to velocityVerlet). */\n  integrator?: 'velocityVerlet' | 'euler'\n}\n\nexport interface EngineWorldConfig {\n  particleCount: number\n  box: { x: number; y: number; z: number }\n}\n\nexport interface EngineNeighborConfig {\n  /** Strategy name. Implemented: 'naive', 'cell'. Planned: 'verlet'. */\n  strategy?: 'naive' | 'cell'\n}\n\n/** Composite config passed to SimulationEngine constructor. */\nexport interface EngineConfig {\n  world: EngineWorldConfig\n  runtime: EngineRuntimeConfig\n  forces: EngineForcesConfig\n  constants: EnginePhysicalConstants\n  neighbor?: EngineNeighborConfig\n}\n\n/** Minimal runtime validation. Throws if a required numeric field is NaN. */\nexport function validateEngineConfig(cfg: EngineConfig): void {\n  const nums: Array<[string, number]> = [\n    ['dt', cfg.runtime.dt],\n    ['cutoff', cfg.runtime.cutoff],\n    ['epsilon', cfg.constants.epsilon],\n    ['sigma', cfg.constants.sigma],\n    ['G', cfg.constants.G],\n    ['K', cfg.constants.K],\n    ['kB', cfg.constants.kB]\n  ]\n  for (const [name, v] of nums) {\n    if (!Number.isFinite(v) || v <= 0) throw new Error(`Invalid numeric config '${name}': ${v}`)\n  }\n  if (cfg.world.particleCount <= 0) throw new Error('particleCount must be > 0')\n  if (cfg.runtime.integrator && cfg.runtime.integrator !== 'velocityVerlet' && cfg.runtime.integrator !== 'euler') {\n    throw new Error('Unsupported integrator ' + cfg.runtime.integrator)\n  }\n  if (cfg.neighbor?.strategy && !['naive', 'cell'].includes(cfg.neighbor.strategy)) throw new Error('Unsupported neighbor strategy ' + cfg.neighbor.strategy)\n}\n\n/** Shape of the mutable UI `settings` object. */\ninterface SettingsLike {\n  particleCount: number\n  spaceBoundaryX: number; spaceBoundaryY: number; spaceBoundaryZ: number\n  dt: number; cutoffDistance: number\n  if_apply_LJpotential?: boolean\n  if_apply_gravitation?: boolean\n  if_apply_coulombForce?: boolean\n  EPSILON: number; DELTA: number; G: number; K: number; kB: number\n}\n\n/**\n * Convert the UI `settings` object into an EngineConfig. This is a thin mapping\n * layer isolating the engine from the sprawling kitchen‑sink settings object.\n */\nexport function fromSettings(settings: SettingsLike): EngineConfig {\n  return {\n    world: {\n      particleCount: settings.particleCount,\n      box: { x: settings.spaceBoundaryX, y: settings.spaceBoundaryY, z: settings.spaceBoundaryZ }\n    },\n    runtime: { dt: settings.dt, cutoff: settings.cutoffDistance },\n    forces: {\n      lennardJones: !!settings.if_apply_LJpotential,\n      gravity: !!settings.if_apply_gravitation,\n      coulomb: !!settings.if_apply_coulombForce\n    },\n    constants: {\n      epsilon: settings.EPSILON,\n      sigma: settings.DELTA,\n      G: settings.G,\n      K: settings.K,\n  kB: settings.kB\n    }\n  }\n}\n"]}
