{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../src/engine/persistence/storage.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAuB,MAAM,cAAc,CAAA;AAGrE,MAAM,GAAG,GAAG,oBAAoB,CAAA;AAEhC,MAAM,UAAU,WAAW,CAAC,MAAwB;IAClD,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAA;QAC7B,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;IACjD,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,IAAI,CAAC,iCAAiC,EAAE,CAAC,CAAC,CAAA;IACpD,CAAC;AACH,CAAC;AAOD,MAAM,UAAU,aAAa;IAC3B,MAAM,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IACrC,IAAI,CAAC,GAAG;QAAE,OAAO,IAAI,CAAA;IACrB,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAmB,CAAA;QAC9C,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC;YACvB,OAAO,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAA;YACtD,OAAO,IAAI,CAAA;QACb,CAAC;QACD,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAA;IAClD,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,IAAI,CAAC,yCAAyC,EAAE,CAAC,CAAC,CAAA;QAC1D,OAAO,IAAI,CAAA;IACb,CAAC;AACH,CAAC;AAED,MAAM,UAAU,mBAAmB;IACjC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;AAC9B,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,MAAwB;IACvD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;IACtD,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAA;IACrC,CAAC,CAAC,IAAI,GAAG,wBAAwB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAA;IAC5D,CAAC,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,qBAAqB,CAAA;IAC7D,CAAC,CAAC,KAAK,EAAE,CAAA;AACX,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,UAAU;IACxB,IAAI,CAAC;QACH,mBAAmB,EAAE,CAAA;QACrB,oDAAoD;QACpD,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,CAAA;IACtC,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,IAAI,CAAC,qCAAqC,EAAE,CAAC,CAAC,CAAA;IACxD,CAAC;IACD,8DAA8D;IAC9D,IAAI,CAAC;QAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAA;IAAC,CAAC;IAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC;IAC3D,QAAQ,CAAC,MAAM,EAAE,CAAA;AACnB,CAAC","sourcesContent":["/**\n * Browser storage helpers built atop engine snapshot persistence.\n *\n * Keeps localStorage concerns out of core snapshot logic so the core remains\n * platform-agnostic (could later persist to IndexedDB, postMessage, etc.).\n */\nimport { snapshot, hydrate, type EngineSnapshot } from './persist.js'\nimport { SimulationEngine } from '../SimulationEngine.js'\n\nconst KEY = 'mdJsEngineSnapshot'\n\nexport function saveToLocal(engine: SimulationEngine): void {\n  try {\n    const snap = snapshot(engine)\n    localStorage.setItem(KEY, JSON.stringify(snap))\n  } catch (e) {\n    console.warn('Failed to save engine snapshot:', e)\n  }\n}\n\nexport interface LoadResult {\n  engine: SimulationEngine\n  snapshot: EngineSnapshot\n}\n\nexport function loadFromLocal(): LoadResult | null {\n  const raw = localStorage.getItem(KEY)\n  if (!raw) return null\n  try {\n    const snap = JSON.parse(raw) as EngineSnapshot\n    if (snap.version !== 1) {\n      console.warn('Unsupported snapshot version; ignoring')\n      return null\n    }\n    return { engine: hydrate(snap), snapshot: snap }\n  } catch (e) {\n    console.warn('Failed to parse stored engine snapshot:', e)\n    return null\n  }\n}\n\nexport function clearStoredSnapshot(): void {\n  localStorage.removeItem(KEY)\n}\n\nexport function downloadSnapshot(engine: SimulationEngine): void {\n  const data = JSON.stringify(snapshot(engine), null, 2)\n  const a = document.createElement('a')\n  a.href = 'data:application/json,' + encodeURIComponent(data)\n  a.download = new Date().toISOString() + '-mdjs-snapshot.json'\n  a.click()\n}\n\n/**\n * Clear any persisted engine snapshot (and legacy state key) then hard-reload the page\n * to construct a fresh universe. Mirrors previous `clearState` behavior.\n */\nexport function resetWorld(): void {\n  try {\n    clearStoredSnapshot()\n    // Remove legacy key for users upgrading mid-session\n    localStorage.removeItem('mdJsState')\n  } catch (e) {\n    console.warn('Failed clearing stored snapshot(s):', e)\n  }\n  // Prevent saving the soon-to-be-discarded state during reload\n  try { window.onbeforeunload = null } catch { /* ignore */ }\n  location.reload()\n}\n"]}
