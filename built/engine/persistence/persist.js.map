{"version":3,"file":"persist.js","sourceRoot":"","sources":["../../../src/engine/persistence/persist.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAA;AACzD,OAAO,EAAE,4BAA4B,EAAE,MAAM,oBAAoB,CAAA;AAcjE,uEAAuE;AACvE,MAAM,UAAU,QAAQ,CAAC,MAAwB;IAC/C,MAAM,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAA;IAC5B,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;IACd,OAAO;QACL,OAAO,EAAE,CAAU;QACnB,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE;QAC1B,IAAI,EAAE,EAAE,CAAC,IAAI;QACb,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QACtD,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QACxD,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAC/C,CAAA;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,OAAO,CAAC,IAAoB;IAC1C,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,MAAM,CAAE,IAA4B,CAAC,OAAO,CAAC,CAAC,CAAA;IACxH,MAAM,GAAG,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAC7C,GAAG,CAAC,IAAI,CAAC;QACP,SAAS,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;QAC5C,UAAU,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;QAC9C,MAAM,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACtC,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;KACzC,CAAC,CAAA;IACF,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACtB,OAAO,GAAG,CAAA;AACZ,CAAC;AAED,0EAA0E;AAC1E,MAAM,UAAU,gBAAgB,CAAC,QAAa;IAC5C,OAAO,4BAA4B,CAAC,QAAQ,CAAC,CAAA;AAC/C,CAAC","sourcesContent":["/**\n * Engine persistence utilities.\n *\n * These functions intentionally capture *only* the simulation domain state – no\n * visualization or HUD specific data. The snapshot is a plain JSON‑serializable\n * object (typed arrays flattened) suitable for localStorage or postMessage.\n */\nimport type { EngineConfig } from '../config/types.js'\nimport { SimulationEngine } from '../SimulationEngine.js'\nimport { legacySettingsToEngineConfig } from '../config/types.js'\n\n/** Serialized representation of engine core state. */\nexport interface EngineSnapshot {\n  version: 1\n  config: EngineConfig\n  time: number\n  /** Flat arrays (length 3N or N). */\n  positions: number[]\n  velocities: number[]\n  masses: number[]\n  charges: number[]\n}\n\n/** Capture a snapshot of the current engine state (copying arrays). */\nexport function snapshot(engine: SimulationEngine): EngineSnapshot {\n  const st = engine.getState()\n  const N = st.N\n  return {\n    version: 1 as const,\n    config: engine.getConfig(),\n    time: st.time,\n    positions: Array.from(st.positions.subarray(0, 3 * N)),\n    velocities: Array.from(st.velocities.subarray(0, 3 * N)),\n    masses: Array.from(st.masses.subarray(0, N)),\n    charges: Array.from(st.charges.subarray(0, N))\n  }\n}\n\n/**\n * Create a new engine from a prior snapshot. Caller can then call run().\n * Assumes snapshot integrity was previously validated.\n */\nexport function hydrate(snap: EngineSnapshot): SimulationEngine {\n  if (snap.version !== 1) throw new Error('Unsupported snapshot version ' + String((snap as { version: number }).version))\n  const eng = new SimulationEngine(snap.config)\n  eng.seed({\n    positions: Float32Array.from(snap.positions),\n    velocities: Float32Array.from(snap.velocities),\n    masses: Float32Array.from(snap.masses),\n    charges: Float32Array.from(snap.charges)\n  })\n  eng.setTime(snap.time)\n  return eng\n}\n\n/** Convenience: derive config from legacy settings and then serialize. */\nexport function configFromLegacy(settings: any): EngineConfig { // eslint-disable-line @typescript-eslint/no-explicit-any\n  return legacySettingsToEngineConfig(settings)\n}\n"]}
