{"version":3,"file":"SimulationEngine.js","sourceRoot":"","sources":["../../src/engine/SimulationEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { Simulation } from '../core/simulation/Simulation.js'\nimport { createState, type SimulationState } from '../core/simulation/state.js'\nimport { VelocityVerlet, EulerIntegrator } from '../core/simulation/integrators.js'\nimport { LennardJones } from '../core/forces/lennardJones.js'\nimport { Gravity } from '../core/forces/gravity.js'\nimport { Coulomb } from '../core/forces/coulomb.js'\nimport type { EngineConfig } from './config/types.js'\nimport { validateEngineConfig } from './config/types.js'\nimport { computeDiagnostics, type Diagnostics } from '../core/simulation/diagnostics.js'\nimport type { ForceField } from '../core/forces/forceInterfaces.js'\nimport { createNaiveNeighborStrategy, activateNeighborStrategy, type NeighborListStrategy, createCellNeighborStrategy } from '../core/neighbor/neighborList.js'\n\n/**\n * Lightweight event emitter (internal). Kept minimal to avoid pulling in a dependency.\n */\n// Allow any object type as event map (keys mapped to payload types) without requiring index signature.\n// We purposefully avoid enforcing Record<string, unknown> to keep declaration simple while still type-safe for declared keys.\nclass Emitter<Events extends { [K in keyof Events]: unknown }> {\n  private listeners: { [K in keyof Events]?: Array<(payload: Events[K]) => void> } = {}\n  on<K extends keyof Events>(event: K, fn: (payload: Events[K]) => void): () => void {\n    const list = this.listeners[event] ?? []\n    list.push(fn)\n    this.listeners[event] = list\n    return () => {\n      const current = this.listeners[event]\n      if (!current) return\n      this.listeners[event] = current.filter(f => f !== fn)\n    }\n  }\n  emit<K extends keyof Events>(event: K, payload: Events[K]): void {\n    const arr = this.listeners[event]\n    if (!arr) return\n    for (const fn of arr) fn(payload)\n  }\n}\n\n/** Public event payloads emitted by SimulationEngine. */\ninterface EngineEvents {\n  /** Fired after each successful integration step with a shallow frame snapshot. */\n  frame: { time: number; state: SimulationState; step: number }\n  /** Diagnostics sample (energy, temperature, extrema). */\n  diagnostics: Diagnostics\n  /** Fired when a configuration patch has been applied. */\n  config: EngineConfig\n  /** Fatal error inside the step loop (engine will auto‑pause). */\n  error: Error\n}\n\n/** Options controlling run loop behavior. */\nexport interface EngineRunOptions {\n  /** If true use `requestAnimationFrame` (browser only); else fixed setInterval fallback. */\n  useRaf?: boolean\n  /** Fixed tick interval ms when not using RAF. */\n  intervalMs?: number\n}\n\n/**\n * Experimental high‑level orchestrator for the existing Simulation.\n *\n * Design intent:\n *  - Provide an eventual drop‑in replacement for ad‑hoc logic currently in `script.ts`.\n *  - Abstract force enabling, config updates & frame emission.\n *  - Keep zero behavior change for the legacy path while we migrate.\n *\n * Current limitations (to be addressed in subsequent phases):\n *  - No worker offload or neighbor list abstraction yet.\n *  - Force plugins are reconstructed on each config change (cheap for now).\n *  - Diagnostics not emitted (will integrate existing computeDiagnostics soon).\n */\nexport class SimulationEngine {\n  private config: EngineConfig\n  private readonly state: SimulationState\n  private sim: Simulation\n  private stepCount = 0\n  private readonly emitter = new Emitter<EngineEvents>()\n  private running = false\n  private rafId: number | null = null\n  private intervalId: ReturnType<typeof setInterval> | null = null\n  /** Emit diagnostics each step (will become configurable). */\n  private readonly diagnosticsEvery = 1\n  /** Active neighbor list strategy (currently naive only). */\n  private neighborStrategy: NeighborListStrategy\n\n  constructor(cfg: EngineConfig) {\n    validateEngineConfig(cfg)\n    this.config = cfg\n    this.state = createState({\n      particleCount: cfg.world.particleCount,\n      box: cfg.world.box,\n      dt: cfg.runtime.dt,\n      cutoff: cfg.runtime.cutoff\n    })\n    this.sim = this.buildSimulation()\n    this.neighborStrategy = this.config.neighbor?.strategy === 'cell'\n      ? createCellNeighborStrategy()\n      : createNaiveNeighborStrategy()\n  activateNeighborStrategy(this.neighborStrategy)\n  }\n\n  /** Subscribe to engine events. Returns an unsubscribe function. */\n  on = this.emitter.on.bind(this.emitter)\n\n  /** Direct access for transitional code (read‑only usage only). */\n  getState(): SimulationState { return this.state }\n\n  /** Current configuration snapshot (clone to discourage external mutation). */\n  getConfig(): EngineConfig { return JSON.parse(JSON.stringify(this.config)) }\n\n  /** Build a Simulation instance corresponding to current config & enabled forces. */\n  private buildSimulation(): Simulation {\n    const forces = []\n    if (this.config.forces.lennardJones) forces.push(new LennardJones({ epsilon: this.config.constants.epsilon, sigma: this.config.constants.sigma }))\n    if (this.config.forces.gravity) forces.push(new Gravity({ G: this.config.constants.G }))\n    if (this.config.forces.coulomb) forces.push(new Coulomb({ K: this.config.constants.K }))\n    const integrator = this.config.runtime.integrator === 'euler' ? EulerIntegrator : VelocityVerlet\n    return new Simulation(this.state, integrator, forces, { dt: this.config.runtime.dt, cutoff: this.config.runtime.cutoff })\n  }\n\n  /** Perform one integration step. Emits a frame event. */\n  step(): void {\n    try {\n      // Rebuild neighbor list if strategy requires (future strategies may depend on cutoff changes)\n      if (this.neighborStrategy.rebuildEveryStep) {\n        this.neighborStrategy.rebuild(this.state, this.config.runtime.cutoff)\n      }\n      this.sim.step()\n      this.stepCount++\n      this.emitter.emit('frame', { time: this.state.time, state: this.state, step: this.stepCount })\n      if (this.stepCount % this.diagnosticsEvery === 0) {\n        const d = computeDiagnostics(this.state, this.sim.getForces(), { cutoff: this.config.runtime.cutoff, kB: this.config.constants.kB })\n        this.emitter.emit('diagnostics', d)\n      }\n    } catch (e) {\n      this.pause()\n      this.emitter.emit('error', e as Error)\n    }\n  }\n\n  /** Start continuous stepping. Idempotent. */\n  run(opts: EngineRunOptions = {}): void {\n    if (this.running) return\n    this.running = true\n    const useRaf = opts.useRaf !== false && typeof requestAnimationFrame === 'function'\n    if (useRaf) {\n      const loop = () => {\n        if (!this.running) return\n        this.step()\n        this.rafId = requestAnimationFrame(loop)\n      }\n      this.rafId = requestAnimationFrame(loop)\n    } else {\n      const interval = opts.intervalMs ?? Math.max(1, Math.round(this.config.runtime.dt * 1000))\n      this.intervalId = setInterval(() => this.step(), interval)\n    }\n  }\n\n  /** Pause continuous stepping (manual `step()` still allowed). */\n  pause(): void {\n    if (!this.running) return\n    this.running = false\n    if (this.rafId != null) cancelAnimationFrame(this.rafId)\n    if (this.intervalId != null) clearInterval(this.intervalId)\n    this.rafId = null\n    this.intervalId = null\n  }\n\n  /** Patch configuration & rebuild force plugins / integration params. */\n  updateConfig(patch: Partial<EngineConfig>): void {\n    // Shallow merge on top levels only (good enough for early phase).\n    this.config = {\n      ...this.config,\n      ...patch,\n      world: { ...this.config.world, ...(patch.world || {}) },\n      runtime: { ...this.config.runtime, ...(patch.runtime || {}) },\n      forces: { ...this.config.forces, ...(patch.forces || {}) },\n      constants: { ...this.config.constants, ...(patch.constants || {}) }\n    }\n    validateEngineConfig(this.config)\n    // Currently we do NOT recreate state; only forces & dt/cutoff are applied.\n    this.sim = this.buildSimulation()\n    if (patch.neighbor?.strategy && patch.neighbor.strategy !== this.neighborStrategy.name) {\n      this.neighborStrategy = patch.neighbor.strategy === 'cell' ? createCellNeighborStrategy() : createNaiveNeighborStrategy()\n      activateNeighborStrategy(this.neighborStrategy)\n    }\n    this.emitter.emit('config', this.getConfig())\n  }\n\n  /** Return active ForceField instances (read-only usage). */\n  getForces(): ForceField[] { return this.sim.getForces() }\n\n  /** Per-force decomposition (proxy to underlying Simulation). */\n  getPerForceContributions(): Record<string, Float32Array> { return this.sim.getPerForceContributions() }\n\n  /** Set simulation time (used during hydration). */\n  setTime(t: number): void { this.state.time = t }\n\n  /** Seed initial state arrays (positions, velocities, masses, charges). Call before run(). */\n  seed(p: { positions?: Float32Array; velocities?: Float32Array; masses?: Float32Array; charges?: Float32Array }): void {\n  // NOTE: We do shallow copies into existing typed arrays; callers keep ownership of source arrays.\n    if (p.positions) this.state.positions.set(p.positions.subarray(0, this.state.positions.length))\n    if (p.velocities) this.state.velocities.set(p.velocities.subarray(0, this.state.velocities.length))\n    if (p.masses) this.state.masses.set(p.masses.subarray(0, this.state.masses.length))\n    if (p.charges) this.state.charges.set(p.charges.subarray(0, this.state.charges.length))\n  }\n}\n\nexport type { EngineConfig } from './config/types.js'\n"]}
