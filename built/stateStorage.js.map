{"version":3,"file":"stateStorage.js","sourceRoot":"","sources":["../src/stateStorage.ts"],"names":[],"mappings":"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","sourcesContent":["interface SavedState {\n  particleCount: number\n  particleColors: number[]\n  particlePositions: number[]\n  particleForces: Array<{ x: number, y: number, z: number }>\n  particleVelocities: Array<{ x: number, y: number, z: number }>\n  particleMasses: number[]\n  particleCharges: number[]\n  time: number\n  lastSnapshotTime: number\n}\n\nfunction dump(state: unknown): void {\n  // Utility to download a JSON snapshot of the simulation state.\n  const textToSave = JSON.stringify(state, null, '\\t')\n  const hiddenElement = document.createElement('a')\n  hiddenElement.href = 'data:attachment/text,' + encodeURI(textToSave)\n  hiddenElement.target = '_blank'\n  const now = new Date()\n  hiddenElement.download = now.toUTCString() + '.json'\n  hiddenElement.click()\n}\n\n// local storage functions:\nfunction save(name: string, obj: unknown): void {\n  localStorage.setItem(name, JSON.stringify(obj))\n}\n\nfunction saveState(state: SavedState): void {\n  save('mdJsState', state)\n}\n\nfunction clearState(): void {\n  localStorage.removeItem('mdJsState')\n  window.onbeforeunload = null\n  location.reload()\n}\n\n// Mutable current saved state snapshot; updated in loadState().\nlet _previousState: SavedState = {\n  particleCount: 0,\n  particleColors: [],\n  particlePositions: [],\n  particleForces: [],\n  particleVelocities: [],\n  particleMasses: [],\n  particleCharges: [],\n  time: 0,\n  lastSnapshotTime: 0\n}\n\n// Create the vertices and add them to the particles geometry\nfunction loadState(): boolean {\n  console.log('Loading mdJsState...')\n  const previousStateLoadedAsString = localStorage.getItem('mdJsState')\n  if (previousStateLoadedAsString == null) {\n    console.log('Variable is not defined in the local storage.')\n    return false\n  }\n  let parsed: unknown\n  try {\n    parsed = JSON.parse(previousStateLoadedAsString)\n  } catch (e) {\n    console.log('Failed to parse stored state.', e)\n    return false\n  }\n  const candidate = parsed as Partial<SavedState>\n  if (\n    typeof candidate.particleCount !== 'number' ||\n    !Array.isArray(candidate.particleColors) ||\n    !Array.isArray(candidate.particlePositions) ||\n    !Array.isArray(candidate.particleForces) ||\n    !Array.isArray(candidate.particleVelocities) ||\n    !Array.isArray(candidate.particleMasses) ||\n    !Array.isArray(candidate.particleCharges) ||\n    typeof candidate.time !== 'number' ||\n    typeof candidate.lastSnapshotTime !== 'number'\n  ) {\n    console.log('Stored object missing required fields.')\n    return false\n  }\n  _previousState = candidate as SavedState\n  console.log('Successfully loaded:', _previousState)\n  return true\n}\nfunction previousState(): SavedState { return _previousState }\nexport type { SavedState }\nexport { dump, clearState, loadState, saveState, previousState }\n"]}