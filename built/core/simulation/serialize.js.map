{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../../src/core/simulation/serialize.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAwB,MAAM,YAAY,CAAA;AAa9D,iEAAiE;AACjE,MAAM,UAAU,cAAc,CAAC,KAAsB;IACnD,OAAO;QACL,CAAC,EAAE,KAAK,CAAC,CAAC;QACV,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QACtC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QACxC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAChC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAChC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAClC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;KACnC,CAAA;AACH,CAAC;AAED,mFAAmF;AACnF,MAAM,UAAU,YAAY,CAAC,CAA4B;IACvD,MAAM,MAAM,GAAG,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAA;IAClF,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,CAAA;IACjC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAA;IACnB,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;IAChC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,CAAA;IAClC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;IAC1B,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;IAC1B,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;IAC5B,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;IAC5B,OAAO,KAAK,CAAA;AACd,CAAC","sourcesContent":["import { createState, type SimulationState } from './state.js'\n\nexport interface SerializedSimulationState {\n  N: number\n  time: number\n  positions: number[]\n  velocities: number[]\n  forces: number[]\n  masses: number[]\n  charges: number[]\n  escaped: number[]\n}\n\n/** Convert typed-array state into plain JSON-friendly object. */\nexport function serializeState(state: SimulationState): SerializedSimulationState {\n  return {\n    N: state.N,\n    time: state.time,\n    positions: Array.from(state.positions),\n    velocities: Array.from(state.velocities),\n    forces: Array.from(state.forces),\n    masses: Array.from(state.masses),\n    charges: Array.from(state.charges),\n    escaped: Array.from(state.escaped)\n  }\n}\n\n/** Reconstruct a SimulationState (fresh typed arrays) from serialized snapshot. */\nexport function hydrateState(s: SerializedSimulationState): SimulationState {\n  const params = { particleCount: s.N, box: { x: 0, y: 0, z: 0 }, dt: 0, cutoff: 0 }\n  const state = createState(params)\n  state.time = s.time\n  state.positions.set(s.positions)\n  state.velocities.set(s.velocities)\n  state.forces.set(s.forces)\n  state.masses.set(s.masses)\n  state.charges.set(s.charges)\n  state.escaped.set(s.escaped)\n  return state\n}\n"]}