{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../src/core/simulation/state.ts"],"names":[],"mappings":"AAAA,mFAAmF;AACnF,4EAA4E;AAoB5E,MAAM,UAAU,WAAW,CAAC,MAAwB,EAAE,QAAmC;IACvF,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,CAAA;IAChC,MAAM,CAAC,GAAG,aAAa,CAAA;IACvB,MAAM,GAAG,GAAG,CAAC,CAAS,EAAE,QAAuB,EAAE,EAAE,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAA;IACtH,MAAM,EAAE,GAAG,CAAC,CAAS,EAAE,QAAqB,EAAE,EAAE,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;IACjH,OAAO;QACL,CAAC;QACD,IAAI,EAAE,QAAQ,EAAE,IAAI,IAAI,CAAC;QACzB,SAAS,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC;QAC1C,UAAU,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,UAAU,CAAC;QAC5C,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC;QACpC,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC;QAChC,OAAO,EAAE,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC;QACpC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC;KAChC,CAAA;AACH,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAsB;IAC/C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACtB,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,CAAS,IAAY,OAAO,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC","sourcesContent":["// Initial Structure-of-Arrays (SoA) state representation for incremental refactor.\n// Does not yet integrate with existing rendering; acts as a parallel model.\n\nexport interface SimulationParams {\n  particleCount: number\n  box: { x: number; y: number; z: number }\n  dt: number\n  cutoff: number\n}\n\nexport interface SimulationState {\n  N: number\n  time: number\n  positions: Float32Array // length 3N\n  velocities: Float32Array // length 3N\n  forces: Float32Array // length 3N (accumulator)\n  masses: Float32Array // length N\n  charges: Float32Array // length N\n  escaped: Uint8Array // 0|1 flags\n}\n\nexport function createState(params: SimulationParams, seedData?: Partial<SimulationState>): SimulationState {\n  const { particleCount } = params\n  const N = particleCount\n  const f32 = (n: number, existing?: Float32Array) => existing && existing.length === n ? existing : new Float32Array(n)\n  const u8 = (n: number, existing?: Uint8Array) => existing && existing.length === n ? existing : new Uint8Array(n)\n  return {\n    N,\n    time: seedData?.time ?? 0,\n    positions: f32(3 * N, seedData?.positions),\n    velocities: f32(3 * N, seedData?.velocities),\n    forces: f32(3 * N, seedData?.forces),\n    masses: f32(N, seedData?.masses),\n    charges: f32(N, seedData?.charges),\n  escaped: u8(N, seedData?.escaped)\n  }\n}\n\nexport function zeroForces(state: SimulationState): void {\n  state.forces.fill(0)\n}\n\nexport function index3(i: number): number { return 3 * i }\n"]}
