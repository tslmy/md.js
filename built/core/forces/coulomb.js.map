{"version":3,"file":"coulomb.js","sourceRoot":"","sources":["../../../src/core/forces/coulomb.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,MAAM,EAAE,MAAM,wBAAwB,CAAA;AAChE,OAAO,EAA4B,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAa5E,MAAM,OAAO,OAAO;IAElB,YAA6B,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;QADzC,SAAI,GAAG,SAAS,CAAA;IAC4B,CAAC;IACtD,KAAK,CAAC,KAAsB,EAAE,GAAiB;QAC7C,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAA;QACzB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAA;QACjC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;YACtD,IAAI,EAAE,KAAK,CAAC;gBAAE,OAAM;YACpB,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YACvB,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;YAC1B,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAA;YAC/D,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACpB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACpB,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;YAChB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;YAChB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;QACtB,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["import { SimulationState, index3 } from '../simulation/state.js'\nimport { ForceField, ForceContext, forEachPair } from './forceInterfaces.js'\n\n/**\n * Coulomb (electrostatic) force.\n * Intuition:\n *  - Like charges repel, opposite charges attract.\n *  - Strength proportional to product of charges; direction along line connecting particles.\n * Parameter K: overall scaling constant (not real Coulomb constant) to keep magnitudes balanced with other forces.\n * Implementation detail: we multiply by 1/r^3 to get component-wise force from raw displacement (dx,dy,dz).\n */\n\nexport interface CoulombParams { K: number }\n\nexport class Coulomb implements ForceField {\n  readonly name = 'coulomb'\n  constructor(private readonly params: CoulombParams) {}\n  apply(state: SimulationState, ctx: ForceContext): void {\n    const { K } = this.params\n    const { forces, charges } = state\n    forEachPair(state, ctx.cutoff, (i, j, dx, dy, dz, r2) => {\n      if (r2 === 0) return\n      const r = Math.sqrt(r2)\n      const invR3 = 1 / (r2 * r)\n      const coeff = K * (charges[i] || 0) * (charges[j] || 0) * invR3\n      const i3 = index3(i)\n      const j3 = index3(j)\n      const fx = coeff * dx\n      const fy = coeff * dy\n      const fz = coeff * dz\n      forces[i3] += fx\n      forces[i3 + 1] += fy\n      forces[i3 + 2] += fz\n      forces[j3] -= fx\n      forces[j3 + 1] -= fy\n      forces[j3 + 2] -= fz\n    })\n  }\n}\n"]}
