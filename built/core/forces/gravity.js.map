{"version":3,"file":"gravity.js","sourceRoot":"","sources":["../../../src/core/forces/gravity.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,MAAM,EAAE,MAAM,wBAAwB,CAAA;AAChE,OAAO,EAA4B,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAa5E,MAAM,OAAO,OAAO;IAElB,YAA6B,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;QADzC,SAAI,GAAG,SAAS,CAAA;IAC4B,CAAC;IACtD,KAAK,CAAC,KAAsB,EAAE,GAAiB;QAC7C,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAA;QACzB,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAA;QAChC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;YACtD,IAAI,EAAE,KAAK,CAAC;gBAAE,OAAM;YACpB,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YACvB,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;YAC1B,MAAM,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;YACjD,kEAAkE;YAClE,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,CAAA;YAChC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACpB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACpB,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;YAChB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;YAChB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;QACtB,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,SAAS,CAAC,KAAsB,EAAE,GAAiB;QACjD,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAA;QACzB,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAA;QACxB,IAAI,CAAC,GAAG,CAAC,CAAA;QACT,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;YACtD,IAAI,EAAE,KAAK,CAAC;gBAAE,OAAM;YACpB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAC/D,CAAC,CAAC,CAAA;QACF,OAAO,CAAC,CAAA;IACV,CAAC;CACF","sourcesContent":["import { SimulationState, index3 } from '../simulation/state.js'\nimport { ForceField, ForceContext, forEachPair } from './forceInterfaces.js'\n\n/**\n * Simple pairwise Newtonian gravity.\n * Characteristics:\n *  - Always attractive (pulls particles together).\n *  - Strength scales with product of masses and inverse square of distance (directional factor gives inverse cube overall for components).\n * Parameter G: tuned constant (not actual physical G units) controlling how strong the pull is.\n * Note: In dense short-range MD mixing gravity with strong LJ repulsion can create clustered behavior; adjust G cautiously.\n */\n\nexport interface GravityParams { G: number }\n\nexport class Gravity implements ForceField {\n  readonly name = 'gravity'\n  constructor(private readonly params: GravityParams) {}\n  apply(state: SimulationState, ctx: ForceContext): void {\n    const { G } = this.params\n    const { forces, masses } = state\n    forEachPair(state, ctx.cutoff, (i, j, dx, dy, dz, r2) => {\n      if (r2 === 0) return\n      const r = Math.sqrt(r2)\n      const invR3 = 1 / (r2 * r)\n      const mProd = (masses[i] || 1) * (masses[j] || 1)\n      // Attractive: negative coefficient times displacement components.\n      const coeff = -G * mProd * invR3\n      const i3 = index3(i)\n      const j3 = index3(j)\n      const fx = coeff * dx\n      const fy = coeff * dy\n      const fz = coeff * dz\n      forces[i3] += fx\n      forces[i3 + 1] += fy\n      forces[i3 + 2] += fz\n      forces[j3] -= fx\n      forces[j3 + 1] -= fy\n      forces[j3 + 2] -= fz\n    })\n  }\n  potential(state: SimulationState, ctx: ForceContext): number {\n    const { G } = this.params\n    const { masses } = state\n    let V = 0\n    forEachPair(state, ctx.cutoff, (i, j, dx, dy, dz, r2) => {\n      if (r2 === 0) return\n      V += -G * (masses[i] || 1) * (masses[j] || 1) / Math.sqrt(r2)\n    })\n    return V\n  }\n}\n"]}
