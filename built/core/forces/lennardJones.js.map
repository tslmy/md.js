{"version":3,"file":"lennardJones.js","sourceRoot":"","sources":["../../../src/core/forces/lennardJones.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,MAAM,EAAE,MAAM,wBAAwB,CAAA;AAChE,OAAO,EAA4B,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAiB5E,MAAM,OAAO,YAAY;IAEvB,YAA6B,MAA0B;QAA1B,WAAM,GAAN,MAAM,CAAoB;QAD9C,SAAI,GAAG,cAAc,CAAA;IAC4B,CAAC;IAC3D,KAAK,CAAC,KAAsB,EAAE,GAAiB;QAC7C,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,MAAM,CAAA;QACtC,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAA;QACxB,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;YACtD,IAAI,EAAE,KAAK,CAAC;gBAAE,OAAM;YACpB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACpB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACpB,MAAM,KAAK,GAAG,CAAC,GAAG,EAAE,CAAA;YACpB,MAAM,GAAG,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,CAAA;YACnC,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;YAC3B,MAAM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAA;YACtB,MAAM,KAAK,GAAG,EAAE,GAAG,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,KAAK,CAAA,CAAC,8CAA8C;YACpG,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE,CAAA;YACrB,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;YAChB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;YAChB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;YACpB,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;QACtB,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,sGAAsG;IACtG,SAAS,CAAC,KAAsB,EAAE,GAAiB;QACjD,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,MAAM,CAAA;QACtC,IAAI,CAAC,GAAG,CAAC,CAAA;QACT,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;YACtD,IAAI,EAAE,KAAK,CAAC;gBAAE,OAAM;YACpB,MAAM,KAAK,GAAG,CAAC,GAAG,EAAE,CAAA;YACpB,MAAM,GAAG,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,CAAA;YACnC,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;YAC3B,MAAM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAA;YACtB,CAAC,IAAI,CAAC,GAAG,OAAO,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;QACF,OAAO,CAAC,CAAA;IACV,CAAC;CACF","sourcesContent":["import { SimulationState, index3 } from '../simulation/state.js'\nimport { ForceContext, ForceField, forEachPair } from './forceInterfaces.js'\n\n/**\n * Lennard-Jones force (short-range repulsion + weak longer-range attraction).\n * Intuition for non-physics maintainers:\n *  - At very short distance particles repel strongly (prevents overlap).\n *  - At moderate distance there's a mild attraction (models van der Waals bonding tendency).\n *  - Beyond the cutoff we ignore interaction to save time.\n * Parameters:\n *  - epsilon: depth of the potential well (overall interaction strength).\n *  - sigma: distance where potential crosses zero (~\"size\" of particle core).\n * Implementation details:\n *  - Uses a standard analytical derivative giving the vector force without computing expensive roots repeatedly.\n */\n\nexport interface LennardJonesParams { epsilon: number; sigma: number }\n\nexport class LennardJones implements ForceField {\n  readonly name = 'lennardJones'\n  constructor(private readonly params: LennardJonesParams) {}\n  apply(state: SimulationState, ctx: ForceContext): void {\n    const { epsilon, sigma } = this.params\n    const { forces } = state\n    forEachPair(state, ctx.cutoff, (i, j, dx, dy, dz, r2) => {\n      if (r2 === 0) return\n      const i3 = index3(i)\n      const j3 = index3(j)\n      const invR2 = 1 / r2\n      const sr2 = (sigma * sigma) * invR2\n      const sr6 = sr2 * sr2 * sr2\n      const sr12 = sr6 * sr6\n      const coeff = 24 * epsilon * (2 * sr12 - sr6) * invR2 // already /r^2, multiply by vector components\n      const fx = coeff * dx\n      const fy = coeff * dy\n      const fz = coeff * dz\n      forces[i3] += fx\n      forces[i3 + 1] += fy\n      forces[i3 + 2] += fz\n      forces[j3] -= fx\n      forces[j3 + 1] -= fy\n      forces[j3 + 2] -= fz\n    })\n  }\n  /** Total Lennard-Jones potential energy: Σ 4ε[(σ/r)^12 - (σ/r)^6] over unique pairs within cutoff. */\n  potential(state: SimulationState, ctx: ForceContext): number {\n    const { epsilon, sigma } = this.params\n    let V = 0\n    forEachPair(state, ctx.cutoff, (i, j, dx, dy, dz, r2) => {\n      if (r2 === 0) return\n      const invR2 = 1 / r2\n      const sr2 = (sigma * sigma) * invR2\n      const sr6 = sr2 * sr2 * sr2\n      const sr12 = sr6 * sr6\n      V += 4 * epsilon * (sr12 - sr6)\n    })\n    return V\n  }\n}\n"]}
