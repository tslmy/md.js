{"version":3,"file":"script.js","sourceRoot":"","sources":["../src/script.ts"],"names":[],"mappings":"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","sourcesContent":["import { settings } from './settings.js'\nimport { init, ifMobileDevice, toggle } from './init.js'\nimport { saveState } from './stateStorage.js'\nimport type { SavedState } from './stateStorage.js'\nimport * as THREE from 'three'\nimport { Particle } from './particleSystem.js'\n// New SoA simulation core imports\nimport { createState, type SimulationState } from './core/simulation/state.js'\nimport { Simulation } from './core/simulation/Simulation.js'\nimport { VelocityVerlet } from './core/simulation/integrators.js'\nimport { LennardJones } from './core/forces/lennardJones.js'\nimport { Gravity } from './core/forces/gravity.js'\nimport { Coulomb } from './core/forces/coulomb.js'\nimport { computeDiagnostics, type Diagnostics } from './core/simulation/diagnostics.js'\n// global variables\ninterface StereoEffectLike { render(scene: THREE.Scene, camera: THREE.Camera): void; setSize?(w: number, h: number): void }\ninterface ControlsLike { update(): void }\ninterface StatsLike { update(): void }\ninterface TemperaturePanelLike { update(t: number, max: number): void }\n\nlet camera: THREE.PerspectiveCamera\nlet scene: THREE.Scene\nlet renderer: THREE.WebGLRenderer\nlet effect: StereoEffectLike | undefined\nlet controls: ControlsLike | undefined\nlet temperaturePanel: TemperaturePanelLike\nlet stats: StatsLike\nlet maxTemperature = 0\nlet particleSystem: THREE.Points | undefined\n// New SoA simulation objects\nlet simulation: Simulation | undefined\nlet simState: SimulationState | undefined\nlet lastDiagnostics: Diagnostics | undefined\n\nconst particles: Particle[] = []\nlet time = 0\nlet lastSnapshotTime = 0\n\n// Expose minimal state for headless smoke tests (non-production usage)\ndeclare global {\n  interface Window { __mdjs?: { particles: Particle[]; settings: typeof settings; simState?: SimulationState; diagnostics?: Diagnostics } }\n}\n\n/**\n * el: the DOM element you'd like to test for visibility.\n */\nfunction isVisible(el: HTMLElement | null): boolean {\n  return !!el && window.getComputedStyle(el).display !== 'none'\n}\n\n// Legacy force application removed in favor of SoA simulation core.\n\n// Derive arrow scaling directly from SoA state (forces & velocities)\nfunction rescaleForceScaleBarFromState(state: SimulationState | undefined): number {\n  if (!state) return 1\n  const { forces, N } = state\n  let maxMag = 0\n  for (let i = 0; i < N; i++) {\n    const i3 = 3 * i\n    const mag = Math.hypot(forces[i3], forces[i3 + 1], forces[i3 + 2])\n    if (mag > maxMag) maxMag = mag\n  }\n  if (maxMag === 0) maxMag = 1\n  const scale = settings.unitArrowLength / maxMag\n  const forceEl = document.getElementById('force')\n  if (forceEl) forceEl.style.width = `${scale * 1000000}px`\n  return scale\n}\n\nfunction rescaleVelocityScaleBarFromState(state: SimulationState | undefined): number {\n  if (!state) return 1\n  const { velocities, N } = state\n  let maxSpeed = 0\n  for (let i = 0; i < N; i++) {\n    const i3 = 3 * i\n    const speed = Math.hypot(velocities[i3], velocities[i3 + 1], velocities[i3 + 2])\n    if (speed > maxSpeed) maxSpeed = speed\n  }\n  if (maxSpeed === 0) maxSpeed = 1\n  const scale = settings.unitArrowLength / maxSpeed\n  const velEl = document.getElementById('velocity')\n  if (velEl) velEl.style.width = `${scale * 1000000}px`\n  return scale\n}\n\n// ArrowHelpers removed; future instanced arrow system will centralize vector -> transform logic.\n\nfunction updateTrajectoryBuffer(p: Particle, trajectory: THREE.BufferAttribute, maxLen: number): void {\n  for (let j = 0; j < maxLen - 1; j++) trajectory.copyAt(j, trajectory, j + 1)\n  trajectory.setXYZ(maxLen - 1, p.position.x, p.position.y, p.position.z)\n  trajectory.needsUpdate = true\n}\n\nfunction updateHudRow(i: number, d: { mass: number; vx: number; vy: number; vz: number; fx: number; fy: number; fz: number }): void {\n  const speed = Math.hypot(d.vx, d.vy, d.vz)\n  const forceMag = Math.hypot(d.fx, d.fy, d.fz)\n  const row = document.querySelector<HTMLElement>(`#tabularInfo > tbody > tr:nth-child(${i + 1})`)\n  if (!row) return\n  const speedEl = row.querySelector<HTMLElement>('.speed'); if (speedEl) speedEl.textContent = `${Math.round(speed * 100) / 100}`\n  const keEl = row.querySelector<HTMLElement>('.kineticEnergy'); if (keEl) keEl.textContent = `${Math.round(speed * speed * d.mass * 50) / 100}`\n  const tfEl = row.querySelector<HTMLElement>('.TotalForceStrength'); if (tfEl) tfEl.textContent = `${Math.round(forceMag * 100) / 100}`\n}\n\nconst _tmpDir = new THREE.Vector3()\nconst _tmpFrom = new THREE.Vector3()\n\nfunction updateFromSimulation(_arrowScaleForForces: number, _arrowScaleForVelocities: number, frameOffset: THREE.Vector3): void {\n  if (!simulation || !simState || !particleSystem) return\n  const hudVisible = isVisible(document.querySelector('#hud'))\n  const needsTrajectoryShift = settings.if_showTrajectory && (time - lastSnapshotTime > settings.dt)\n  const posAttr = particleSystem.geometry.attributes.position as THREE.BufferAttribute\n  for (let i = 0; i < particles.length; i++) updateOneParticle(i, posAttr, hudVisible, needsTrajectoryShift, frameOffset)\n  posAttr.needsUpdate = true\n}\n\nfunction updateOneParticle(i: number, posAttr: THREE.BufferAttribute, hudVisible: boolean, needsTrajectoryShift: boolean, frameOffset: THREE.Vector3): void {\n  if (!simState) return\n  const { positions, velocities, forces, masses } = simState\n  const p = particles[i]\n  if (p.isEscaped) return\n  const i3 = 3 * i\n  let px = positions[i3] - frameOffset.x\n  let py = positions[i3 + 1] - frameOffset.y\n  let pz = positions[i3 + 2] - frameOffset.z\n  // We'll update p.position after applying frame offset / PBC so tests & UI see displayed coordinates.\n  posAttr.setXYZ(i, px, py, pz)\n  const trajectoryAttr = (settings.if_showTrajectory && p.trajectory)\n    ? p.trajectory.geometry.getAttribute('position') as THREE.BufferAttribute\n    : null\n  if (settings.if_use_periodic_boundary_condition) {\n    _tmpDir.set(px, py, pz)\n    applyPbc(_tmpDir, trajectoryAttr, settings.maxTrajectoryLength, settings.spaceBoundaryX, settings.spaceBoundaryY, settings.spaceBoundaryZ)\n    px = _tmpDir.x; py = _tmpDir.y; pz = _tmpDir.z\n    posAttr.setXYZ(i, px, py, pz)\n  }\n  if (trajectoryAttr && needsTrajectoryShift) updateTrajectoryBuffer({ position: _tmpFrom.set(px, py, pz) } as Particle, trajectoryAttr, settings.maxTrajectoryLength)\n  const vx = velocities[i3], vy = velocities[i3 + 1], vz = velocities[i3 + 2]\n  const fx = forces[i3], fy = forces[i3 + 1], fz = forces[i3 + 2]\n  // Mirror final (display) position for tests & capture\n  p.position.set(px, py, pz)\n  if (hudVisible) updateHudRow(i, { mass: masses[i] || 1, vx, vy, vz, fx, fy, fz })\n}\n\n// Removed legacy applyParticleVisualUpdate; loop logic in updateFromSimulation now works directly off SoA arrays.\n\nfunction applyPbc(pos: THREE.Vector3, trajectory: THREE.BufferAttribute | null, maxLen: number, bx: number, by: number, bz: number): void {\n  const wrapAxis = (axis: 'x' | 'y' | 'z', boundary: number, adjust: (delta: number) => void) => {\n    while (pos[axis] < -boundary) { pos[axis] += 2 * boundary; adjust(2 * boundary) }\n    while (pos[axis] > boundary) { pos[axis] -= 2 * boundary; adjust(-2 * boundary) }\n  }\n  const adjustFactory = (setter: (i: number, v: number) => void, getter: (i: number) => number) => (delta: number) => {\n    if (!trajectory) return\n    for (let j = 0; j < maxLen; j++) setter(j, getter(j) + delta)\n    trajectory.needsUpdate = true\n  }\n  wrapAxis('x', bx, adjustFactory((i, v) => trajectory?.setX(i, v), i => trajectory?.getX(i) ?? 0))\n  wrapAxis('y', by, adjustFactory((i, v) => trajectory?.setY(i, v), i => trajectory?.getY(i) ?? 0))\n  wrapAxis('z', bz, adjustFactory((i, v) => trajectory?.setZ(i, v), i => trajectory?.getZ(i) ?? 0))\n}\n\n/**\n * Advance simulation one timestep and update visual + diagnostic layers.\n * Split from animate() to keep the frame logic testable and reduce complexity warnings.\n */\nfunction runFrame(): void {\n  time += settings.dt\n  if (simulation) simulation.step()\n  const arrowScaleForces = rescaleForceScaleBarFromState(simState)\n  const arrowScaleVel = rescaleVelocityScaleBarFromState(simState)\n  const frameOffset = computeFrameOffset()\n  updateFromSimulation(arrowScaleForces, arrowScaleVel, frameOffset)\n  if (settings.if_showTrajectory && time - lastSnapshotTime > settings.dt) lastSnapshotTime = time\n  statistics(temperaturePanel, maxTemperature)\n  updateDiagnostics()\n  update(); render(renderer, effect); stats.update()\n}\n\n/**\n * Determine the frame offset based on the selected reference frame mode.\n *  - fixed: origin remains at (0,0,0)\n *  - sun: subtract position of particle 0\n *  - com: subtract instantaneous center-of-mass (translational DOF removal)\n */\nfunction computeFrameOffset(): THREE.Vector3 {\n  if (!simState) return new THREE.Vector3(0,0,0)\n  if (settings.referenceFrameMode === 'sun' && simState.N > 0) {\n    return new THREE.Vector3(simState.positions[0], simState.positions[1], simState.positions[2])\n  }\n  if (settings.referenceFrameMode === 'com') {\n    const { masses, positions, N } = simState\n    let mx=0,my=0,mz=0,mTot=0\n    for (let i=0;i<N;i++) {\n      const i3=3*i; const m=masses[i]||1\n      mx += m*positions[i3]; my += m*positions[i3+1]; mz += m*positions[i3+2]; mTot += m\n    }\n    if (mTot>0) return new THREE.Vector3(mx/mTot, my/mTot, mz/mTot)\n  }\n  return new THREE.Vector3(0,0,0)\n}\n\n/**\n * Compute & expose latest diagnostics snapshot (energy, temperature, extrema).\n */\nfunction updateDiagnostics(): void {\n  if (!simState || !simulation) return\n  lastDiagnostics = computeDiagnostics(simState, simulation.getForces(), { cutoff: settings.cutoffDistance, kB: settings.kB })\n  if (window.__mdjs) window.__mdjs.diagnostics = lastDiagnostics\n}\n\nfunction animate(): void {\n  runFrame()\n  if (settings.ifRun) requestAnimationFrame(animate)\n}\nfunction calculateTemperature(): number {\n  if (!simState) return 0\n  const { velocities, masses, N } = simState\n  let sum = 0\n  for (let i = 0; i < N; i++) {\n    const i3 = 3 * i\n    const vx = velocities[i3], vy = velocities[i3 + 1], vz = velocities[i3 + 2]\n    sum += (masses[i] || 1) * (vx * vx + vy * vy + vz * vz)\n  }\n  const temperature = sum / settings.kB / (3 * settings.particleCount - 3)\n  if (temperature > maxTemperature) maxTemperature = temperature\n  return temperature\n}\n\nfunction statistics(panel: { update: (t: number, max: number) => void }, maxTemperature: number): void {\n  const temperature = calculateTemperature()\n  panel.update(temperature, maxTemperature)\n}\n\nfunction update(): void {\n  // (removed stale resize comment)\n  camera.updateProjectionMatrix()\n  if (controls) controls.update()\n}\n\nfunction render(renderer: THREE.WebGLRenderer, effect: StereoEffectLike | undefined): void {\n  if (ifMobileDevice && effect) {\n    effect.render(scene, camera)\n  } else {\n    renderer.render(scene, camera)\n  }\n}\n\n// when document is ready:\n// Source: https://stackoverflow.com/a/9899701/1147061\nfunction docReady(fn: () => void): void {\n  // see if DOM is already available\n  if (document.readyState === 'complete' || document.readyState === 'interactive') {\n    // call on next available tick\n    setTimeout(fn, 1)\n  } else {\n    document.addEventListener('DOMContentLoaded', fn)\n  }\n}\ndocReady(() => {\n  console.log('Ready.')\n\n  const values = init(settings,\n    particles,\n    time,\n    lastSnapshotTime)\n\n  scene = values[0]\n  particleSystem = values[1] as THREE.Points\n  camera = values[2]\n  renderer = values[3]\n  controls = values[4]\n  stats = values[5]\n  temperaturePanel = values[6]\n  effect = values[7]\n\n  // Build SoA simulation state from existing particle objects\n  simState = createState({\n    particleCount: settings.particleCount,\n    box: { x: settings.spaceBoundaryX, y: settings.spaceBoundaryY, z: settings.spaceBoundaryZ },\n    dt: settings.dt,\n    cutoff: settings.cutoffDistance\n  })\n  // Seed arrays\n  for (let i = 0; i < particles.length; i++) {\n    const i3 = 3 * i\n    simState.positions[i3] = particles[i].position.x\n    simState.positions[i3 + 1] = particles[i].position.y\n    simState.positions[i3 + 2] = particles[i].position.z\n  // Seed velocities from captured initialVelocities array exported by particleSystem module (if present on window for tests)\n  const maybe = (window as unknown as { initialVelocities?: number[] })?.initialVelocities || []\n  simState.velocities[i3] = maybe[i3] || 0\n  simState.velocities[i3 + 1] = maybe[i3 + 1] || 0\n  simState.velocities[i3 + 2] = maybe[i3 + 2] || 0\n    simState.masses[i] = particles[i].mass\n    simState.charges[i] = particles[i].charge\n  }\n  const forcePlugins = []\n  if (settings.if_apply_LJpotential) forcePlugins.push(new LennardJones({ epsilon: settings.EPSILON, sigma: settings.DELTA }))\n  if (settings.if_apply_gravitation) forcePlugins.push(new Gravity({ G: settings.G }))\n  if (settings.if_apply_coulombForce) forcePlugins.push(new Coulomb({ K: settings.K }))\n  simulation = new Simulation(simState, VelocityVerlet, forcePlugins, { dt: settings.dt, cutoff: settings.cutoffDistance })\n\n  animate()\n  // Expose handle for automated headless tests\n  // Expose simulation state (read-only for tests; mutation not supported outside test harness)\n  window.__mdjs = { particles, settings, simState, diagnostics: lastDiagnostics }\n  // Install full-state persistence handler (overrides placeholder in init.js)\n  window.onbeforeunload = () => {\n    try {\n      const snapshot: SavedState = captureState()\n      saveState(snapshot)\n    } catch (e) {\n      console.log('Failed to persist state:', e)\n    }\n  }\n  // bind keyboard event:\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'Tab') {\n      e.preventDefault()\n      toggle('#hud')\n    }\n  })\n})\n\n// Build a complete snapshot matching SavedState interface for persistence.\nfunction captureState(): SavedState {\n  const particleCount = particles.length\n  const particleColors: number[] = []\n  const particlePositions: number[] = []\n  const particleForces: Array<{ x: number, y: number, z: number }> = []\n  const particleVelocities: Array<{ x: number, y: number, z: number }> = []\n  const particleMasses: number[] = []\n  const particleCharges: number[] = []\n  if (simState) {\n    for (let i = 0; i < particleCount; i++) {\n      const p = particles[i]\n      particleColors.push(p.color.r, p.color.g, p.color.b)\n      particlePositions.push(p.position.x, p.position.y, p.position.z)\n      const i3 = 3 * i\n      particleForces.push({ x: simState.forces[i3], y: simState.forces[i3 + 1], z: simState.forces[i3 + 2] })\n      particleVelocities.push({ x: simState.velocities[i3], y: simState.velocities[i3 + 1], z: simState.velocities[i3 + 2] })\n      particleMasses.push(simState.masses[i])\n      particleCharges.push(simState.charges[i])\n    }\n  }\n  return { particleCount, particleColors, particlePositions, particleForces, particleVelocities, particleMasses, particleCharges, time, lastSnapshotTime }\n}\n"]}
