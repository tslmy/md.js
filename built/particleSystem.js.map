{"version":3,"file":"particleSystem.js","sourceRoot":"","sources":["../src/particleSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\n/**\n * Internal metadata stored on a THREE.Line's built-in `userData` bag.\n * Three.js gives every Object3D a `userData: Record<string, any>` that it does not interpret,\n * except for cloning/serialization. We use it to track a circular (ring) buffer write index\n * for trajectory points so we avoid O(N) shifting each frame. The name \"userData\" just means\n * \"application-owned data\" – not related to an end-user or auth concept.\n */\ninterface TrajectoryRingMeta { write: number; length: number; count: number }\ninterface TrajectoryLine extends THREE.Line { userData: { trajectoryRing?: TrajectoryRingMeta } }\nimport { generateTexture } from './drawingHelpers.js'\n// Type alias for settings shape (imported dynamically); avoids circular dep.\ntype Settings = typeof import('./settings.js').settings\nconst texture = new THREE.Texture(generateTexture())\ntexture.needsUpdate = true // important\nconst particleMaterialForClones = new THREE.PointsMaterial({\n  // http://jsfiddle.net/7yDGy/1/\n  map: texture,\n  size: 0.2,\n  alphaTest: 0.5,\n  vertexColors: true\n})\n\nconst columnNames = ['speed', 'kineticEnergy', 'LJForceStrength', 'GravitationForceStrength', 'CoulombForceStrength', 'TotalForceStrength']\n\nclass Particle {\n  color: THREE.Color\n  position: THREE.Vector3\n  mass: number\n  charge: number\n  trajectory: THREE.Line | null\n  isEscaped: boolean = false\n\n  constructor(\n    color: THREE.Color,\n    position: THREE.Vector3,\n    mass: number,\n    charge: number,\n    trajectory: THREE.Line | null\n  ) {\n    this.color = color\n    this.position = position\n    this.mass = mass\n    this.charge = charge\n    this.trajectory = trajectory\n    this.isEscaped = false\n  }\n}\n\n// Store initial velocities separately for seeding the SoA simulation state.\nexport const initialVelocities: number[] = [] // flat array length 3 * particleCount\n\ninterface AddParticleOpts {\n  color: THREE.Color\n  position: THREE.Vector3\n  velocity: THREE.Vector3\n  mass: number\n  charge: number\n  particles: Particle[]\n  geometry: THREE.BufferGeometry\n  scene: THREE.Scene\n  showTrajectory: boolean\n  maxTrajectoryLength: number\n}\nfunction addParticle(opts: AddParticleOpts): void {\n  const { color, position, velocity, mass, charge, particles, geometry, scene, showTrajectory, maxTrajectoryLength } = opts\n  // Create the vertex\n  // Add the vertex to the geometry\n  geometry.attributes.position.setXYZ(\n    particles.length,\n    position.x,\n    position.y,\n    position.z\n  )\n  geometry.attributes.color.setXYZ(\n    particles.length,\n    color.r, color.g, color.b\n  )\n\n  // add trajectories.\n\n  let thisTrajectory: THREE.Line | null = null\n  if (showTrajectory) {\n    // make colors (http://jsfiddle.net/J7zp4/200/)\n    thisTrajectory = makeTrajectory(\n      color,\n      position,\n      maxTrajectoryLength\n    )\n    scene.add(thisTrajectory)\n  }\n\n  const particle = new Particle(color, position, mass, charge, thisTrajectory)\n  particles.push(particle)\n  // Record initial velocity components for SoA seeding.\n  initialVelocities.push(velocity.x, velocity.y, velocity.z)\n  // Make the HUD table.\n  const tableRow = document.createElement('tr')\n  const particleColumn = document.createElement('td')\n  particleColumn.classList.add('particle')\n  particleColumn.innerText = '⬤'\n  particleColumn.style.color = color.getStyle()\n  tableRow.appendChild(particleColumn)\n  const massColumn = document.createElement('td')\n  massColumn.classList.add('mass')\n  massColumn.innerText = `${Math.round(mass * 10) / 10}`\n  tableRow.appendChild(massColumn)\n  const chargeColumn = document.createElement('td')\n  chargeColumn.classList.add('mass')\n  chargeColumn.innerText = `${Math.round(charge * 10) / 10}`\n  tableRow.appendChild(chargeColumn)\n  for (const columnName of columnNames) {\n    const column = document.createElement('td')\n    column.classList.add(columnName)\n    tableRow.appendChild(column)\n  }\n  const tbody = document.querySelector<HTMLTableSectionElement>('#tabularInfo > tbody')\n  if (tbody) tbody.appendChild(tableRow)\n}\n\nfunction makeClonePositionsList(\n  x: number,\n  y: number,\n  z: number\n): THREE.Vector3[] {\n  return [\n    new THREE.Vector3(2 * x, 0, 0),\n    new THREE.Vector3(-2 * x, 0, 0),\n    new THREE.Vector3(0, 2 * y, 0),\n    new THREE.Vector3(0, -2 * y, 0),\n    new THREE.Vector3(0, 0, 2 * z),\n    new THREE.Vector3(0, 0, -2 * z),\n    new THREE.Vector3(2 * x, 0, 2 * z),\n    new THREE.Vector3(-2 * x, 0, 2 * z),\n    new THREE.Vector3(2 * x, 0, -2 * z),\n    new THREE.Vector3(-2 * x, 0, -2 * z),\n    new THREE.Vector3(0, 2 * y, 2 * z),\n    new THREE.Vector3(0, -2 * y, 2 * z),\n    new THREE.Vector3(0, 2 * y, -2 * z),\n    new THREE.Vector3(0, -2 * y, -2 * z),\n    new THREE.Vector3(2 * x, 2 * y, 0),\n    new THREE.Vector3(-2 * x, 2 * y, 0),\n    new THREE.Vector3(2 * x, -2 * y, 0),\n    new THREE.Vector3(-2 * x, -2 * y, 0),\n    new THREE.Vector3(2 * x, 2 * y, 2 * z),\n    new THREE.Vector3(-2 * x, 2 * y, 2 * z),\n    new THREE.Vector3(2 * x, -2 * y, 2 * z),\n    new THREE.Vector3(-2 * x, -2 * y, 2 * z),\n    new THREE.Vector3(2 * x, 2 * y, -2 * z),\n    new THREE.Vector3(-2 * x, 2 * y, -2 * z),\n    new THREE.Vector3(2 * x, -2 * y, -2 * z),\n    new THREE.Vector3(-2 * x, -2 * y, -2 * z)\n  ]\n}\n\n/**\n *  Make objects that will contain the trajectory points.\n * See <http://stackoverflow.com/questions/31399856/drawing-a-line-with-three-js-dynamically>.\n */\nfunction makeTrajectory(\n  thisColor: THREE.Color,\n  thisPosition: THREE.Vector3,\n  maxTrajectoryLength: number\n): THREE.Line {\n  const thisGeometry = new THREE.BufferGeometry()\n  const white = new THREE.Color('#FFFFFF')\n  // attributes\n  const points = new Float32Array(maxTrajectoryLength * 3) // 3 vertices per point\n  const colors = new Float32Array(maxTrajectoryLength * 3) // 3 vertices per point\n  thisGeometry.setAttribute('position', new THREE.BufferAttribute(points, 3))\n  thisGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n  for (let i = 0; i < maxTrajectoryLength; i++) {\n    // for each vertex of this trajectory:\n    // calculate for how many percent should the color of this vertex be diluted/bleached.\n    const interpolationFactor = (maxTrajectoryLength - i) / maxTrajectoryLength\n    // make the bleached color object by cloning the particle's color and then lerping it with the white color.\n    const thisVertexColor = thisColor.clone().lerp(white, interpolationFactor)\n    // assign this color to this vertex\n    thisGeometry.attributes.color.setXYZ(\n      i,\n      thisVertexColor.r,\n      thisVertexColor.g,\n      thisVertexColor.b\n    )\n    // put this(every) vertex to the same place as the particle started\n    thisGeometry.attributes.position.setXYZ(\n      i,\n      thisPosition.x,\n      thisPosition.y,\n      thisPosition.z\n    )\n  }\n  // finished preparing the geometry for this trajectory\n  const thisTrajectoryMaterial = new THREE.LineBasicMaterial({\n    linewidth: 1,\n    vertexColors: true\n  })\n  const line: TrajectoryLine = new THREE.Line(thisGeometry, thisTrajectoryMaterial) as TrajectoryLine\n  // Attach ring buffer bookkeeping (ignored by Three.js internals, safe to mutate each frame).\n  line.userData.trajectoryRing = { write: 0, length: maxTrajectoryLength, count: 0 }\n  return line\n}\n\n/**\n * Creates and initializes a particle system in a Three.js scene, including the main particle system and its periodic clones.\n *\n * This function sets up the geometry, material, and positions for a collection of particles, optionally adding a central \"sun\" particle.\n * It ensures the total number of particles matches the specified count in settings, randomizing positions and velocities as needed.\n * The function also creates clones of the particle system at specified offsets to simulate periodic boundary conditions.\n *\n * This is purely for visual effect and does not affect the underlying physics simulation.\n *\n * @param group - The parent Three.js Object3D to which the particle system and its clones will be added.\n * @param particles - The array to store and manage all Particle objects in the system.\n * @param scene - The Three.js scene where the particle system is rendered.\n * @param time - The current simulation time.\n * @param lastSnapshotTime - The time of the last simulation snapshot.\n * @param settings - Configuration options for the particle system, including particle count, boundaries, and physical constants.\n * @returns The main THREE.Points object representing the particle system.\n */\nfunction createParticleSystem(\n  group: THREE.Object3D,\n  particles: Particle[],\n  scene: THREE.Scene,\n  time: number,\n  lastSnapshotTime: number,\n  settings: Settings\n): THREE.Points {\n  // Particles are just individual vertices in a geometry\n  // Create the geometry that will hold all of the vertices\n  const particlesGeometry = new THREE.BufferGeometry()\n  // https://stackoverflow.com/a/31411794/1147061\n  const positions = new Float32Array(settings.particleCount * 3) // 3 vertices per point\n  particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  const colors = new Float32Array(settings.particleCount * 3) // 3 vertices per point\n  particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n  const particleMaterial = new THREE.PointsMaterial({\n    // http://jsfiddle.net/7yDGy/1/\n    map: texture,\n    blending: THREE.NormalBlending, // required\n    depthTest: true,\n    transparent: true,\n    // opacity: 0.9,\n    size: 0.3,\n    vertexColors: true\n  })\n  if (settings.if_makeSun) {\n    addParticle({\n      color: new THREE.Color(0, 0, 0),\n      position: new THREE.Vector3(0, 0, 0),\n      velocity: new THREE.Vector3(0, 0, 0),\n      mass: settings.sunMass,\n      charge: 0,\n      particles,\n      geometry: particlesGeometry,\n      scene,\n      showTrajectory: settings.if_showTrajectory,\n      maxTrajectoryLength: settings.maxTrajectoryLength\n    })\n  }\n  // now, no matter how many particles has been pre-defined (e.g. the Sun) and how many are loaded from previous session, add particles till particleCount is met:\n  for (let i = particles.length; i < settings.particleCount; i++) {\n    let r: number\n    let position: THREE.Vector3\n    let velocity: THREE.Vector3\n    if (settings.if_makeSun) {\n      // Previously particles were constrained to y=0 plane; now we randomize full 3D position for variety.\n      position = new THREE.Vector3(\n        random(-settings.spaceBoundaryX, settings.spaceBoundaryX),\n        random(-settings.spaceBoundaryY, settings.spaceBoundaryY),\n        random(-settings.spaceBoundaryZ, settings.spaceBoundaryZ)\n      )\n      r = position.length()\n      // The speed in the vertical direction should be the orbital speed.\n      // See https://www.physicsclassroom.com/class/circles/Lesson-4/Mathematics-of-Satellite-Motion.\n      const vy = Math.sqrt((settings.G * particles[0].mass) / r)\n      velocity = new THREE.Vector3(0, vy, 0)\n      // Let's also round-robin the orientation of the orbiting motions with each \"planet\". It's more fun.\n      if (i % 2 === 0) {\n        velocity.negate()\n      }\n    } else {\n      position = new THREE.Vector3(\n        random(-settings.spaceBoundaryX, settings.spaceBoundaryX),\n        random(-settings.spaceBoundaryY, settings.spaceBoundaryY),\n        random(-settings.spaceBoundaryZ, settings.spaceBoundaryZ)\n      )\n      r = position.length()\n      velocity = new THREE.Vector3(0, 0, 0)\n    }\n    // Force should always be initialized to zero. It will be computed properly upon first refresh.\n    // Don't share this object across particles, though -- The values of their components will vary across particles during simulation.\n    addParticle({\n      color: new THREE.Color(Math.random(), Math.random(), Math.random()),\n      position,\n      velocity,\n      mass: random(settings.massLowerBound, settings.massUpperBound),\n      charge: sample<number>(settings.availableCharges),\n      particles,\n      geometry: particlesGeometry,\n      scene,\n      showTrajectory: settings.if_showTrajectory,\n      maxTrajectoryLength: settings.maxTrajectoryLength\n    })\n  }\n  // Create the material that will be used to render each vertex of the geometry\n  // Create the particle system\n  const particleSystem = new THREE.Points(particlesGeometry, particleMaterial)\n  particleSystem.position.set(0, 0, 0)\n  group.add(particleSystem)\n  console.log('Particle System created:', particleSystem)\n\n  const clonePositions = makeClonePositionsList(\n    settings.spaceBoundaryX,\n    settings.spaceBoundaryY,\n    settings.spaceBoundaryZ\n  )\n  const cloneTemplate = particleSystem.clone()\n  cloneTemplate.material = particleMaterialForClones\n  clonePositions.forEach((clonePosition) => {\n    const clone = cloneTemplate.clone()\n    clone.position.set(clonePosition.x, clonePosition.y, clonePosition.z)\n    group.add(clone)\n  })\n  return particleSystem\n}\n\n\nfunction random(min: number, max: number): number {\n  return Math.random() * (max - min) + min\n}\n\nfunction sample<Type>(l: Type[]): Type {\n  return l[~~(Math.random() * l.length)]\n}\n\nexport {\n  createParticleSystem,\n  makeClonePositionsList,\n  particleMaterialForClones,\n  Particle\n}\n"]}
